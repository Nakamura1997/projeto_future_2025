version: "3.8"

networks:
  future_network:
    driver: bridge

services:
  frontend:
    build:
      context: ./app-frontend
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000 
    restart: always
    networks:
      - future_network

  backend:
    container_name: future_backend
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    command: >
      sh -c "sleep 10 &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - ENV=development
      - CHOKIDAR_USEPOLLING=true
      - POSTGRES_DB=cybersec_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=fs3m2025
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    depends_on:
      - db
    restart: always
    networks:
      - future_network

  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: cybersec_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: fs3m2025
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - pg_wal_archive:/var/lib/postgresql/wal_archive
    networks:
      - future_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d cybersec_db" ]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  db_data:
  pg_wal_archive:
